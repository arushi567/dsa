#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

const int MAX = 100;
int adjMatrix[MAX][MAX];     // Adjacency matrix
vector<int> adj[MAX];        // Adjacency list
vector<string> landmarks;    // ID ? Name

int getID(const string& name) {
    for (int i = 0; i < landmarks.size(); i++) {
        if (landmarks[i] == name)
            return i;
    }
    return -1; // Not found
}

void DFSUtil(int node, vector<bool>& visited) {
    visited[node] = true;
    cout << landmarks[node] << " ";

    for (int i = 0; i < landmarks.size(); i++) {
        if (adjMatrix[node][i] == 1 && !visited[i]) {
            DFSUtil(i, visited);
        }
    }
}

void DFS(const string& startLandmark) {
    int start = getID(startLandmark);
    vector<bool> visited(landmarks.size(), false);
    cout << "\nDFS Traversal: ";
    DFSUtil(start, visited);
    cout << endl;
}

void BFS(const string& startLandmark) {
    int start = getID(startLandmark);
    vector<bool> visited(landmarks.size(), false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    cout << "\nBFS Traversal: ";

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << landmarks[node] << " ";

        for (int i = 0; i < adj[node].size(); i++) {
            int neighbor = adj[node][i];
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
    cout << endl;
}

int main() {
    int n;
    cout << "Enter number of landmarks: ";
    cin >> n;
    cin.ignore();

    cout << "Enter landmark names:\n";
    for (int i = 0; i < n; i++) {
        string name;
        getline(cin, name);
        landmarks.push_back(name);
    }

    int e;
    cout << "Enter number of connections: ";
    cin >> e;
    cin.ignore();

    cout << "Enter " << e << " connections (format: Landmark1 Landmark2):\n";
    for (int i = 0; i < e; i++) {
        string from, to;
        getline(cin, from, ' ');
        getline(cin, to);

        int u = getID(from);
        int v = getID(to);

        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    string start;
    cout << "Enter starting landmark for DFS and BFS: ";
    getline(cin, start);

    DFS(start);
    BFS(start);

    return 0;
}
