#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string keyword;
    string meaning;
    Node* left;
    Node* right;

    Node(string k, string m) {
        keyword = k;
        meaning = m;
        left = right = NULL;
    }
};

class Dictionary {
private:
    Node* root;

    Node* insert(Node* node, string key, string meaning) {
        if (!node) return new Node(key, meaning);
        if (key < node->keyword)
            node->left = insert(node->left, key, meaning);
        else if (key > node->keyword)
            node->right = insert(node->right, key, meaning);
        else
            cout << "Keyword already exists.\n";
        return node;
    }

    Node* findMin(Node* node) {
        while (node && node->left)
            node = node->left;
        return node;
    }

Node* deleteKeyword(Node* node, string key) {
    if (!node) return NULL;

    if (key < node->keyword)
        node->left = deleteKeyword(node->left, key);
    else if (key > node->keyword)
        node->right = deleteKeyword(node->right, key);
    else {
        // Node to be deleted found
        if (!node->left) {
            Node* temp = node->right;
            delete node;
            return temp;
        } else if (!node->right) {
            Node* temp = node->left;
            delete node;
            return temp;
        }

        // Node with two children: get inorder successor (min in right subtree)
        Node* temp = findMin(node->right);
        node->keyword = temp->keyword;
        node->meaning = temp->meaning;
        node->right = deleteKeyword(node->right, temp->keyword);
    }

    return node;
}


    Node* update(Node* node, string key, string newMeaning) {
        if (!node) return NULL;
        if (key < node->keyword)
            return update(node->left, key, newMeaning);
        else if (key > node->keyword)
            return update(node->right, key, newMeaning);
        else {
            node->meaning = newMeaning;
            return node;
        }
    }

    void inorder(Node* node) {
        if (!node) return;
        inorder(node->left);
        cout << node->keyword << " : " << node->meaning << endl;
        inorder(node->right);
    }

    void reverseInorder(Node* node) {
        if (!node) return;
        reverseInorder(node->right);
        cout << node->keyword << " : " << node->meaning << endl;
        reverseInorder(node->left);
    }

    int search(Node* node, string key, int& comparisons) {
        while (node) {
            comparisons++;
            if (key == node->keyword)
                return 1;
            else if (key < node->keyword)
                node = node->left;
            else
                node = node->right;
        }
        return 0;
    }

    int height(Node* node) {
        if (!node) return 0;
        int lh = height(node->left);
        int rh = height(node->right);
        return 1 + max(lh, rh);
    }

public:
    Dictionary() {
        root = NULL;
    }

    void add(string key, string meaning) {
        root = insert(root, key, meaning);
    }

    void remove(string key) {
        root = deleteKeyword(root, key);
    }

    void updateMeaning(string key, string newMeaning) {
        if (!update(root, key, newMeaning))
            cout << "Keyword not found.\n";
    }

    void displayAscending() {
        cout << "Dictionary in Ascending Order:\n";
        inorder(root);
    }

    void displayDescending() {
        cout << "Dictionary in Descending Order:\n";
        reverseInorder(root);
    }

    void findKeyword(string key) {
        int comparisons = 0;
        if (search(root, key, comparisons))
            cout << "Keyword found in " << comparisons << " comparisons.\n";
        else
            cout << "Keyword not found after " << comparisons << " comparisons.\n";
    }

    void maxComparisons() {
        int h = height(root);
        cout << "Maximum comparisons required (height of BST): " << h << endl;
    }
};

int main() {
    Dictionary dict;
    int choice;
    string key, meaning;

    do {
        cout << "\n--- Dictionary Menu ---\n";
        cout << "1. Add Keyword\n2. Delete Keyword\n3. Update Meaning\n4. Display Ascending\n5. Display Descending\n";
        cout << "6. Search Keyword\n7. Max Comparisons\n8. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
        case 1:
            cout << "Enter keyword: ";
            getline(cin, key);
            cout << "Enter meaning: ";
            getline(cin, meaning);
            dict.add(key, meaning);
            break;
        case 2:
            cout << "Enter keyword to delete: ";
            getline(cin, key);
            dict.remove(key);
            break;
        case 3:
            cout << "Enter keyword to update: ";
            getline(cin, key);
            cout << "Enter new meaning: ";
            getline(cin, meaning);
            dict.updateMeaning(key, meaning);
            break;
        case 4:
            dict.displayAscending();
            break;
        case 5:
            dict.displayDescending();
            break;
        case 6:
            cout << "Enter keyword to search: ";
            getline(cin, key);
            dict.findKeyword(key);
            break;
        case 7:
            dict.maxComparisons();
            break;
        case 8:
            cout << "Exiting.\n";
            break;
        default:
            cout << "Invalid choice!\n";
        }
    } while (choice != 8);

    return 0;
}
